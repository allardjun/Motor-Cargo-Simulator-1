function params=import_params(localpath,run_name)

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/Matt/Desktop/forces_test/test.0.0_params.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/05/24 15:29:29

%% Initialize variables.
filename = [localpath '/' run_name '_params.txt'];

if ~exist(filename,'file')
    error(['Cant find ' filename])
end

delimiter = ' ';
startRow = [11,13,20,27,29,33,171,177,212];
endRow = [11,18,25,27,31,34,171,177,212];

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
test = cell2mat(raw);
%% Clear temporary variables
%clearvars filename delimiter startRow endRow formatSpec fileID block dataArrayBlock col dataArray ans raw numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;

%% convert to data structure

params=struct();

params.N=test(1,1:2)';
params.F_s=test(2,1:2)';
params.F_d=test(3,1:2)';
params.eps_0=test(4,1:2)';
params.pi_0=test(5,1:2)';
params.v_f=test(6,1:2)';
params.v_b=test(7,1:2)';
params.a=test(8,1:2)';
params.b=test(9,1:2)';
params.w=test(10,1:2)';
params.L=test(11,1:2)';
params.k_m=test(12,1:2)';
params.step_size=test(13,1:2)';
params.D_m=test(14,1:2)';
params.center_inital=test(15,1:3)';
params.R=test(16,1)';
params.eta=test(17,1)';
params.n_MTs=test(18,1)';
params.kcMT=test(19,1)';
params.F_ext=test(20,2:4)';
params.T_ext=test(21,2:4)';
params.theta_c=test(22,2);

%clearvars test;

end